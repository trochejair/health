//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.HealthFoot.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HealthEntities : DbContext
    {
        public HealthEntities()
            : base("name=HealthEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<CATEGORIA> CATEGORIA { get; set; }
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<DETALLE_ORDEN> DETALLE_ORDEN { get; set; }
        public virtual DbSet<DIRECCION> DIRECCION { get; set; }
        public virtual DbSet<EMBARQUE> EMBARQUE { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADO { get; set; }
        public virtual DbSet<ENTREGA> ENTREGA { get; set; }
        public virtual DbSet<FORMULA> FORMULA { get; set; }
        public virtual DbSet<IMAGEN_PRODUCTO> IMAGEN_PRODUCTO { get; set; }
        public virtual DbSet<INSUMO> INSUMO { get; set; }
        public virtual DbSet<INSUMO_ORDEN> INSUMO_ORDEN { get; set; }
        public virtual DbSet<ORDEN> ORDEN { get; set; }
        public virtual DbSet<ORDEN_PROVEEDOR> ORDEN_PROVEEDOR { get; set; }
        public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<RUTA> RUTA { get; set; }
        public virtual DbSet<VEHICULO> VEHICULO { get; set; }
        public virtual DbSet<VENTA> VENTA { get; set; }
    
        public virtual ObjectResult<spEMBARQUECt_Result> spEMBARQUECt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEMBARQUECt_Result>("spEMBARQUECt");
        }
    
        public virtual int spEmbarqueEl(Nullable<int> iDEM)
        {
            var iDEMParameter = iDEM.HasValue ?
                new ObjectParameter("IDEM", iDEM) :
                new ObjectParameter("IDEM", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmbarqueEl", iDEMParameter);
        }
    
        public virtual int spEmbarqueIn(ObjectParameter iDEM, Nullable<int> iDR, Nullable<int> iDV, Nullable<System.DateTime> fECHA)
        {
            var iDRParameter = iDR.HasValue ?
                new ObjectParameter("IDR", iDR) :
                new ObjectParameter("IDR", typeof(int));
    
            var iDVParameter = iDV.HasValue ?
                new ObjectParameter("IDV", iDV) :
                new ObjectParameter("IDV", typeof(int));
    
            var fECHAParameter = fECHA.HasValue ?
                new ObjectParameter("FECHA", fECHA) :
                new ObjectParameter("FECHA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmbarqueIn", iDEM, iDRParameter, iDVParameter, fECHAParameter);
        }
    
        public virtual int spEmbarqueUp(Nullable<int> iDEM, Nullable<int> iDR, Nullable<int> iDV, Nullable<System.DateTime> fECHA)
        {
            var iDEMParameter = iDEM.HasValue ?
                new ObjectParameter("IDEM", iDEM) :
                new ObjectParameter("IDEM", typeof(int));
    
            var iDRParameter = iDR.HasValue ?
                new ObjectParameter("IDR", iDR) :
                new ObjectParameter("IDR", typeof(int));
    
            var iDVParameter = iDV.HasValue ?
                new ObjectParameter("IDV", iDV) :
                new ObjectParameter("IDV", typeof(int));
    
            var fECHAParameter = fECHA.HasValue ?
                new ObjectParameter("FECHA", fECHA) :
                new ObjectParameter("FECHA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmbarqueUp", iDEMParameter, iDRParameter, iDVParameter, fECHAParameter);
        }
    
        public virtual int spENTREGAEl(Nullable<int> iDE)
        {
            var iDEParameter = iDE.HasValue ?
                new ObjectParameter("IDE", iDE) :
                new ObjectParameter("IDE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spENTREGAEl", iDEParameter);
        }
    
        public virtual int spRUTAEd(Nullable<int> iDRUTA, string iNICIO, string fIN, Nullable<int> dISTANCIA)
        {
            var iDRUTAParameter = iDRUTA.HasValue ?
                new ObjectParameter("IDRUTA", iDRUTA) :
                new ObjectParameter("IDRUTA", typeof(int));
    
            var iNICIOParameter = iNICIO != null ?
                new ObjectParameter("INICIO", iNICIO) :
                new ObjectParameter("INICIO", typeof(string));
    
            var fINParameter = fIN != null ?
                new ObjectParameter("FIN", fIN) :
                new ObjectParameter("FIN", typeof(string));
    
            var dISTANCIAParameter = dISTANCIA.HasValue ?
                new ObjectParameter("DISTANCIA", dISTANCIA) :
                new ObjectParameter("DISTANCIA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRUTAEd", iDRUTAParameter, iNICIOParameter, fINParameter, dISTANCIAParameter);
        }
    
        public virtual int spRUTAEl(Nullable<int> iDE)
        {
            var iDEParameter = iDE.HasValue ?
                new ObjectParameter("IDE", iDE) :
                new ObjectParameter("IDE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRUTAEl", iDEParameter);
        }
    
        public virtual int spRUTAIn(ObjectParameter iDR, string iNICIO, string fIN, Nullable<int> dISTANCIA)
        {
            var iNICIOParameter = iNICIO != null ?
                new ObjectParameter("INICIO", iNICIO) :
                new ObjectParameter("INICIO", typeof(string));
    
            var fINParameter = fIN != null ?
                new ObjectParameter("FIN", fIN) :
                new ObjectParameter("FIN", typeof(string));
    
            var dISTANCIAParameter = dISTANCIA.HasValue ?
                new ObjectParameter("DISTANCIA", dISTANCIA) :
                new ObjectParameter("DISTANCIA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRUTAIn", iDR, iNICIOParameter, fINParameter, dISTANCIAParameter);
        }
    
        public virtual ObjectResult<spVehiculoCt_Result> spVehiculoCt(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVehiculoCt_Result>("spVehiculoCt", iDParameter);
        }
    
        public virtual int spVEHICULOEd(Nullable<int> iDV, string nOMBRE, string mARCA, string mODELO, string cAPACIDAD, string pESO, Nullable<int> cILINDROS)
        {
            var iDVParameter = iDV.HasValue ?
                new ObjectParameter("IDV", iDV) :
                new ObjectParameter("IDV", typeof(int));
    
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var mARCAParameter = mARCA != null ?
                new ObjectParameter("MARCA", mARCA) :
                new ObjectParameter("MARCA", typeof(string));
    
            var mODELOParameter = mODELO != null ?
                new ObjectParameter("MODELO", mODELO) :
                new ObjectParameter("MODELO", typeof(string));
    
            var cAPACIDADParameter = cAPACIDAD != null ?
                new ObjectParameter("CAPACIDAD", cAPACIDAD) :
                new ObjectParameter("CAPACIDAD", typeof(string));
    
            var pESOParameter = pESO != null ?
                new ObjectParameter("PESO", pESO) :
                new ObjectParameter("PESO", typeof(string));
    
            var cILINDROSParameter = cILINDROS.HasValue ?
                new ObjectParameter("CILINDROS", cILINDROS) :
                new ObjectParameter("CILINDROS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spVEHICULOEd", iDVParameter, nOMBREParameter, mARCAParameter, mODELOParameter, cAPACIDADParameter, pESOParameter, cILINDROSParameter);
        }
    
        public virtual int spVEHICULOEl(Nullable<int> iDV)
        {
            var iDVParameter = iDV.HasValue ?
                new ObjectParameter("IDV", iDV) :
                new ObjectParameter("IDV", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spVEHICULOEl", iDVParameter);
        }
    
        public virtual int spVEHICULOIn(ObjectParameter iDV, string nOMBRE, string mARCA, string mODELO, string cAPACIDAD, string pESO, Nullable<int> cILINDROS)
        {
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var mARCAParameter = mARCA != null ?
                new ObjectParameter("MARCA", mARCA) :
                new ObjectParameter("MARCA", typeof(string));
    
            var mODELOParameter = mODELO != null ?
                new ObjectParameter("MODELO", mODELO) :
                new ObjectParameter("MODELO", typeof(string));
    
            var cAPACIDADParameter = cAPACIDAD != null ?
                new ObjectParameter("CAPACIDAD", cAPACIDAD) :
                new ObjectParameter("CAPACIDAD", typeof(string));
    
            var pESOParameter = pESO != null ?
                new ObjectParameter("PESO", pESO) :
                new ObjectParameter("PESO", typeof(string));
    
            var cILINDROSParameter = cILINDROS.HasValue ?
                new ObjectParameter("CILINDROS", cILINDROS) :
                new ObjectParameter("CILINDROS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spVEHICULOIn", iDV, nOMBREParameter, mARCAParameter, mODELOParameter, cAPACIDADParameter, pESOParameter, cILINDROSParameter);
        }
    }
}
